[build-system]
requires = ["setuptools >= 77.0.3", "wheel", "lxml"]
build-backend = "setuptools.build_meta"

[project]
name = "pudding"
dynamic = ["version"]
description = "Pudding converts text to a structured format, such as XML, JSON or YAML."
authors = [
    {name = "Moritz Hille", email = "moritz.hekxsler@gmail.com"},
]
dependencies = [
    "argparse",
    "lxml",
    "pyyaml",
]
requires-python = ">=3.12"
readme = "README.md"
license = "GPL-3.0-only"
license-files = ["LICENSE"]
keywords = ["parser", "converter", "text", "xml", "yaml", "json"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: File Formats",
  "Topic :: Text Processing",
  "Topic :: Utilities"
]

[project.scripts]
pudding = "pudding.__main__:main"

[project.urls]
Homepage = "https://github.com/Hekxsler/pudding"
Issues = "https://github.com/Hekxsler/pudding/issues"


[tool.setuptools.dynamic]
version = {attr = "pudding.__version__"}


[tool.pdm.dev-dependencies]
format = [
    "black",
    "isort",
]
lint = [
    "flake8",
    "flake8-docstrings",
    "Flake8-pyproject",
    "mypy",
    "types-requests",
    "pip"
]
refactor = [
    "rope",
]
test = [
    "pytest",
    "pytest-env",
    "testfixtures",
]
tool = [
    "tox",
    "tox-pdm",
    "pre-commit",
]

[tool.pdm.scripts]
# Better use these unspecific commands, especially in pipelines!
format = "black {args} ."
isort = "isort --skip-gitignore {args} ."
lint = "flake8 {args}"
pip = "pip {args}"
test = "pytest {args}"
typing = "mypy {args} ."
all = {composite = ["isort", "format", "typing", "lint", "test"]}


[tool.black]
line-length = 88


[tool.isort]
profile = "black"


[tool.flake8]
extend-ignore = [
    # See https://github.com/PyCQA/pycodestyle/issues/373
    "E203",
]
extend-exclude = [
    ".git",
    ".gitignore",
    ".pytest_cache",
    ".tox",
    ".venv",
    "__pycache__",
    "build",
    "dist",
]
docstring-convention = "pep257"
max-line-length = 88
count = true


[tool.mypy]
disallow_untyped_decorators = "true"
ignore_missing_imports = "true"
strict = "true"


[tool.coverage.report]
exclude_also = [
    "def __repr__",
    "raise NotImplementedError",
]
